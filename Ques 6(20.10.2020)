Question: <h1>Count all possible paths between two vertices in a directed graph without a cycle</h1>


Solution:

#include<bits/stdc++.h>
using namespace std;

Class Graph
{
   int V;
   list<int*>adj;
   void countPathsUtil(int,int,int&);
   
   public:
   
    Graph(int V);
    void addEdge(int u,int v);
    void countPaths(int s,int d);
    
};

Graph::Graph(int V)
{
  this->V=V;
  adj=new list<int*>[V];
}

void Graph::addEdge(int u,int v)
{ 
  adj[u].push_back(v);
}

void Graph::countPaths(int s,int d)
{
  int count=0;
  countPathsUtil(s,d,count);
  return count;
 
}

void Graph :: countPathsUtil(int u,int d,int &count)
{
  
  if(u==d)
  count+=1;
  else
  {
    list<int>::iterator i;
    for(i=adj[u].begin();i!=adj[u].end();i++)
    countPathsUtil(*i,d,pathCount);
  }
  
 }
 
int main()
{
  Graph g(5);
  g.addEdge(0,1);
  g.addEdge(0,2);
  g.addEdge(0,3);
  g.addEdge(1,3);
  g.addEdge(2,3);
  g.addEdge(1,4);
  g.addEdge(2,4);
  
  int s=0, d=3;
  cout<<g.countPaths(s,d);
  }
  
  
  
  
  

